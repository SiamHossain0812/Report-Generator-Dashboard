import pandas as pd
from google.colab import files

uploaded = files.upload()
filename = list(uploaded.keys())[0]

df = pd.read_csv(filename)
df.replace([' ', '', '-', 'NA', 'N/A'], pd.NA, inplace=True)
df['Time'] = pd.to_datetime(df['Time'], dayfirst=True, errors='coerce')

df = df.dropna(subset=['Time'])
start_time = df['Time'].min()
end_time = df['Time'].max()
expected_times = pd.date_range(start=start_time, end=end_time, freq='15min', inclusive='left')

df = df[df['Time'].isin(expected_times)]
df = df[~df.duplicated(subset=['Time'], keep='first') | df.drop(columns=['Time']).notna().any(axis=1)]
time_col = df['Time'].astype(str).tolist()
missing_values = {}
missing_times_lists = {}

for col in df.columns[1:]:
    series = df[col]
    missing_mask = series.isna()
    missing_values[col] = missing_mask.sum()

    times = []
    gap_start = None

    for idx, is_missing in enumerate(missing_mask):
        if is_missing and gap_start is None:
            gap_start = time_col[idx]
        elif not is_missing and gap_start is not None:
            gap_end = time_col[idx - 1]
            if gap_start == gap_end:
                times.append(gap_start)
            else:
                times.append(f"{gap_start} - {gap_end}")
            gap_start = None

    if gap_start is not None:
        gap_end = time_col[-1]
        if gap_start == gap_end:
            times.append(gap_start)
        else:
            times.append(f"{gap_start} - {gap_end}")

    if not times:
        times = ['No Missing Data']

    missing_times_lists[col] = times

columns = list(missing_values.keys())
final_data = []
final_data.append(['Missing_Values'] + [missing_values[col] for col in columns])

max_len = max(len(missing_times_lists[col]) for col in columns)
for i in range(max_len):
    row_label = 'Missing_Times' if i == 0 else ''
    row = [row_label]
    for col in columns:
        times = missing_times_lists[col]
        row.append(times[i] if i < len(times) else '')
    final_data.append(row)

final_df = pd.DataFrame(final_data, columns=['Station'] + columns)

result_filename = filename.replace('.csv', '_clean_missing_summary.csv')
final_df.to_csv(result_filename, index=False)
files.download(result_filename)
